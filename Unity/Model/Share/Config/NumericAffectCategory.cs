
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




using Luban;
using System.Collections.Generic;

namespace ET
{
    [Config]
    public partial class NumericAffectCategory : Singleton<NumericAffectCategory>, ISingletonAwake
    {
        private readonly Dictionary<int, NumericAffectConfig> _dataMap;
        private readonly List<NumericAffectConfig> _dataList;
        
        public NumericAffectCategory(ByteBuf _buf)
        {
            _dataMap = new Dictionary<int, NumericAffectConfig>();
            _dataList = new List<NumericAffectConfig>();
            
            for(int n = _buf.ReadSize() ; n > 0 ; --n)
            {
                NumericAffectConfig _v;
                _v = global::ET.NumericAffectConfig.DeserializeNumericAffectConfig(_buf);
                _dataList.Add(_v);
                _dataMap.Add(_v.Id, _v);
            }
        }
        public void Awake()
        {
            
        }

        public Dictionary<int, NumericAffectConfig> GetAll() => _dataMap;
        public Dictionary<int, NumericAffectConfig> DataMap => _dataMap;
        public List<NumericAffectConfig> DataList => _dataList;

        public NumericAffectConfig GetOrDefault(int key) => _dataMap.GetValueOrDefault(key);

        public NumericAffectConfig Get(int key)
        {
            if (_dataMap.TryGetValue(key,out var v))
            {
                return v;
            }
            Log.Instance.Error($"No Found {this.GetType()} {key}");
            return default;
        }

        public bool TryGet(int key, out NumericAffectConfig value)
        {
            return _dataMap.TryGetValue(key, out value);
        }

    }
}


